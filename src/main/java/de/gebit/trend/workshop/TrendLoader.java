//
// TrendLoader.java
//
// Copyright (C) 2022
// GEBIT Solutions GmbH,
// Berlin, Duesseldorf, Stuttgart (Germany)
// All rights reserved.
//
//

package de.gebit.trend.workshop;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import de.gebit.trend.exception.TrendFailureException;
import de.gebit.trend.bo.attribute.*;
import de.gebit.trend.bo.persistence.*;
import de.gebit.trend.bo.relation.*;
import de.gebit.trend.model.*;
import de.gebit.trend.model.annotations.Generated;


/**
 * This class can be used in a TREND application to define the model to be used on runtime.
 * It was automatically generated by a TREND model generator tool.
 *
 * please do not change manually !
 */
@Generated
@SuppressWarnings("all")
public class TrendLoader extends de.gebit.trend.model.loader.DefaultModelLoader
		implements TaggedValueConstants {

/**
 * Get the valid model loader version at generation time.
 */
@Override
public int getVersion() {
	return 8;
}

/**
 * Overridden to define all domain types.
 * These are defined in the first pass of the model initialization.
 */
@Override
protected void loadUMLDomainTypesInto(UMLModel aModel) {
	UMLClass tempClass;

	PropertyConstraints tempConstraints;

	tempClass = aModel.createClass("de.gebit.trend.workshop.bo.NameDomainType");
	tempClass.setStereotype(UMLClass.STEREOTYPE_DOMAIN_TYPE_OBJECT);
	tempConstraints = new BasicMinMaxSizeConstraints(0, 100);
	tempClass.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempClass.setProperty(PROP_PREFERRED_SQL_TYPE, new Integer(java.sql.Types.VARCHAR));

}


/**
 * Overridden to define all other UMLObjects and their corresponding links.
 * Currently the generic model loader definition code generator does not support
 * links between elements, which are not in the same diagram / package.
 */
@Override
protected void loadOtherModelElementsInto(UMLModel aModel) throws TrendFailureException {
	loadGoShoppingUmlActivity();
	loadMyDataEntryActivitiesUmlActivity();
	loadProductDetailsUmlActivity();
	loadTrendUseCasesUmlUseCaseGraph();
}


/**
 * Defines UMLContainer 'Go Shopping' including its children and contained links
 */
private void loadGoShoppingUmlActivity() {
	UMLStateMachine tempStateMachine;
	UMLActionNode tempActionNode;
	UMLTransition tempTransition;

	// --------------------------------------
	// State Machine Go Shopping
	// --------------------------------------
	tempStateMachine = getFactory().createUMLStateMachine();
	tempStateMachine.setId("ACTV-3r02gjih0q2f48olq39lzdvro");
	tempStateMachine.setName("Go Shopping");
	tempStateMachine.setStereotype(UMLStateMachine.STEREOTYPE_ACTIVITIES);

	initUMLStateMap();
	// Action Node Confirm Order
	tempActionNode = fetchUMLActionNodeByName("Confirm Order", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzda3j");
	tempActionNode.setName("Confirm Order");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.workshop.activities.ConfirmOrderController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOEditorView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.OrderVM");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOEditor");

	// Transition Confirm Order.confirm to MainEnd
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd7bc");
	tempTransition.setName("confirm");
	tempTransition.setProperty(PROP_SM_TRANSITION_TRIGGER, "actionEvent");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("MainEnd", MetaclassNames.ACTIVITY_FINAL));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Confirm Order.previous to Confirm Order
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9ml");
	tempTransition.setName("previous");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Confirm Order", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Confirm Order.return to Select Products
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd78v");
	tempTransition.setName("return");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Select Products", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Do Payment
	tempActionNode = fetchUMLActionNodeByName("Do Payment", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzda3k");
	tempActionNode.setName("Do Payment");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.gui.application.components.ServiceBOEditorController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOEditorView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.PaymentVM");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOEditor");

	// Transition Do Payment.next to Confirm Order
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9mm");
	tempTransition.setName("next");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setProperty(PROP_SM_CONTEXT_PROPERTY_BINDINGS, "payment");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Confirm Order", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Do Payment.previous to Do Payment
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9sc");
	tempTransition.setName("previous");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Do Payment", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Hello
	tempActionNode = fetchUMLActionNodeByName("Hello", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjewh3ftyx22pft4sou8n");
	tempActionNode.setName("Hello");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractMessageBoxGUI");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "MessageBox");

	// Transition Hello.OK to Hello
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjewh3ftyx22pft4sou4d");
	tempTransition.setName("OK");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Hello", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Login
	tempActionNode = fetchUMLActionNodeByName("Login", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzdvrk");
	tempActionNode.setName("Login");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.workshop.activities.LoginController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOEditorView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.LoginVM");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_URL, "login.xhtml");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOEditor");

	// Transition Login.hello to Hello
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjewh3ftyx22pft4sou63");
	tempTransition.setName("hello");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Hello", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Login.loginFailed to Login Failed
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzda72");
	tempTransition.setName("loginFailed");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Login Failed", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Login.next to Select Products
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzdvki");
	tempTransition.setName("next");
	tempTransition.setProperty(PROP_SM_ACTION_METHOD, new ActionMethodDescriptor("de.gebit.trend.workshop.activities.LoginController#performNext"));
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Select Products", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Login.return to MainEnd2
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzdb5d");
	tempTransition.setName("return");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "exec");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("MainEnd2", MetaclassNames.ACTIVITY_FINAL));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Login Failed
	tempActionNode = fetchUMLActionNodeByName("Login Failed", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzdagr");
	tempActionNode.setName("Login Failed");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractMessageBoxGUI");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_ACTIVATION_POLICY, "OPEN_IN_PLACE");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "MessageBox");

	// Transition Login Failed.OK to Login Failed
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzdaaj");
	tempTransition.setName("OK");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Login Failed", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node MainEnd
	tempActionNode = fetchUMLActionNodeByName("MainEnd", MetaclassNames.ACTIVITY_FINAL);
	tempActionNode.setId("END-3r02gjih0q2f48olq39lzd9mk");
	tempActionNode.setName("MainEnd");

	tempStateMachine.addChild(tempActionNode);

	// Action Node MainEnd2
	tempActionNode = fetchUMLActionNodeByName("MainEnd2", MetaclassNames.ACTIVITY_FINAL);
	tempActionNode.setId("END-3r02gjih0q2f48olq39lzdvh9");
	tempActionNode.setName("MainEnd2");

	tempStateMachine.addChild(tempActionNode);

	// Action Node MainStart
	tempActionNode = fetchUMLActionNodeByName("MainStart", MetaclassNames.INITIAL);
	tempActionNode.setId("STRT-3r02gjih0q2f48olq39lzdvrl");
	tempActionNode.setName("MainStart");

	// Transition MainStart to Login
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzdvp9");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Login", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Product Details
	tempActionNode = fetchUMLActionNodeByName("Product Details", MetaclassNames.ACTION);
	tempActionNode.setStereotype(UMLState.STEREOTYPE_PROCEDURE_ACTIVITY);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzd56h");
	tempActionNode.setName("Product Details");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_SUB_STATE_MACHINE, "de.gebit.trend.workshop.activities.Product Details");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");

	// Transition Product Details.end to Select Products
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd0td");
	tempTransition.setName("end");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Select Products", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Provide Shipping Information
	tempActionNode = fetchUMLActionNodeByName("Provide Shipping Information", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzda3l");
	tempActionNode.setName("Provide Shipping Information");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.workshop.activities.ProvideShippingInformationController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOEditorView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.ShippingInfoVM");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOEditor");

	// Transition Provide Shipping Information.next to Do Payment
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9sd");
	tempTransition.setName("next");
	tempTransition.setProperty(PROP_SM_ACTION_METHOD, new ActionMethodDescriptor("de.gebit.trend.workshop.activities.ProvideShippingInformationController#performNext"));
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Do Payment", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Provide Shipping Information.previous to Provide Shipping Information
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9wx");
	tempTransition.setName("previous");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Provide Shipping Information", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Select Products
	tempActionNode = fetchUMLActionNodeByName("Select Products", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzdvp8");
	tempActionNode.setName("Select Products");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.workshop.activities.SelectProductsController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOBrowserView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.ProductVM");
	tempActionNode.setProperty(PROP_SM_WORKFLOW_CONTEXT_CLASS, "de.gebit.trend.workshop.activities.GoShoppingWorkflowContext");
	tempActionNode.setProperty(PROP_SM_SELECTION_MODE, "CheckboxStyleSelection");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOBrowser");

	// Transition Select Products.details to Product Details
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd26q");
	tempTransition.setName("details");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setProperty(PROP_SM_TRANSITION_EXPLICIT_TARGET, "start");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Product Details", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Select Products.next to Provide Shipping Information
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd9wy");
	tempTransition.setName("next");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "call");
	tempTransition.setProperty(PROP_SM_CONTEXT_PROPERTY_BINDINGS, "products");
	tempTransition.setCondition("canPerformNext()");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Provide Shipping Information", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	// Transition Select Products.return to Select Products
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzdvha");
	tempTransition.setName("return");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setProperty(PROP_SM_TRANSITION_TRIGGER, "actionEvent");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Select Products", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	releaseUMLStateMap();
	lookupUMLPackage("de.gebit.trend.workshop.activities").addChild(tempStateMachine);

}


/**
 * Defines UMLContainer 'MyDataEntryActivities' including its children and contained links
 */
private void loadMyDataEntryActivitiesUmlActivity() {
	UMLStateMachine tempStateMachine;
	UMLActionNode tempActionNode;
	UMLTransition tempTransition;

	// --------------------------------------
	// State Machine MyDataEntryActivities
	// --------------------------------------
	tempStateMachine = getFactory().createUMLStateMachine();
	tempStateMachine.setId("ACTV-3r02gjih0q2f48olq39lzczqf");
	tempStateMachine.setName("MyDataEntryActivities");
	tempStateMachine.setProperty(PROP_SM_ACTIVITY_EXTENDED_ACTIVITY, "de.gebit.trend.gui.application.workflows.DataEntryActivities/Browse And Edit Top Level Objects");
	tempStateMachine.setStereotype("ExtensionActivities");

	initUMLStateMap();
	// Action Node Message Box Hello
	tempActionNode = fetchUMLActionNodeByName("Message Box Hello", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzcz0v");
	tempActionNode.setName("Message Box Hello");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractMessageBoxGUI");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "MessageBox");

	// Transition Message Box Hello.OK to Message Box Hello
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzcym3");
	tempTransition.setName("OK");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "return");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Message Box Hello", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node MyBrowseAndEdit
	tempActionNode = fetchUMLActionNodeByName("MyBrowseAndEdit", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzcz0w");
	tempActionNode.setName("MyBrowseAndEdit");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.gui.application.components.TrendBOBrowseAndEditController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOBrowseAndEditView");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOBrowseAndEdit");

	// Transition MyBrowseAndEdit.hello to Message Box Hello
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzcyyw");
	tempTransition.setName("hello");
	tempTransition.setProperty(PROP_SM_TRANSITION_TRIGGER, "actionEvent");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Message Box Hello", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node Start
	tempActionNode = fetchUMLActionNodeByName("Start", MetaclassNames.INITIAL);
	tempActionNode.setId("STRT-3r02gjih0q2f48olq39lzcz2f");
	tempActionNode.setName("Start");

	// Transition Start to MyBrowseAndEdit
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzcyik");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("MyBrowseAndEdit", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	releaseUMLStateMap();
	lookupUMLPackage("de.gebit.trend.workshop.dataentry").addChild(tempStateMachine);

}


/**
 * Defines UMLContainer 'Product Details' including its children and contained links
 */
private void loadProductDetailsUmlActivity() {
	UMLStateMachine tempStateMachine;
	UMLActionNode tempActionNode;
	UMLTransition tempTransition;

	// --------------------------------------
	// State Machine Product Details
	// --------------------------------------
	tempStateMachine = getFactory().createUMLStateMachine();
	tempStateMachine.setId("ACTV-3r02gjih0q2f48olq39lzd5s0");
	tempStateMachine.setName("Product Details");
	tempStateMachine.setStereotype(UMLStateMachine.STEREOTYPE_ACTIVITIES);

	initUMLStateMap();
	// Action Node Product Details
	tempActionNode = fetchUMLActionNodeByName("Product Details", MetaclassNames.ACTION);
	tempActionNode.setId("ACTN-3r02gjih0q2f48olq39lzd5op");
	tempActionNode.setName("Product Details");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_CONTROLLER_CLASS, "de.gebit.trend.gui.application.components.ServiceBOEditorController");
	tempActionNode.setProperty(PROP_SM_ACTIVITY_VIEW_CLASS, "de.gebit.trend.gui.application.components.AbstractBOEditorView");
	tempActionNode.setProperty(PROP_SM_MODEL_CLASS, "de.gebit.trend.workshop.activities.ProductVM");
	tempActionNode.setProperty(PROP_SM_PLUGGABLE_COMPONENT_TYPE, "BOEditor");

	// Transition Product Details.return to end
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd56i");
	tempTransition.setName("return");
	tempTransition.setProperty(PROP_SM_TRANSITION_KIND, "exec");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("end", MetaclassNames.ACTIVITY_FINAL));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	// Action Node end
	tempActionNode = fetchUMLActionNodeByName("end", MetaclassNames.ACTIVITY_FINAL);
	tempActionNode.setId("END-3r02gjih0q2f48olq39lzd5ek");
	tempActionNode.setName("end");

	tempStateMachine.addChild(tempActionNode);

	// Action Node start
	tempActionNode = fetchUMLActionNodeByName("start", MetaclassNames.INITIAL);
	tempActionNode.setId("STRT-3r02gjih0q2f48olq39lzd5ry");
	tempActionNode.setName("start");

	// Transition start to Product Details
	tempTransition = createTransition();
	tempTransition.setId("CNTR-3r02gjih0q2f48olq39lzd5el");
	tempTransition.setSourceObject(tempActionNode);
	tempTransition.setTargetObject(fetchUMLActionNodeByName("Product Details", MetaclassNames.ACTION));
	tempActionNode.addOutgoingLink(tempTransition);

	tempStateMachine.addChild(tempActionNode);

	releaseUMLStateMap();
	lookupUMLPackage("de.gebit.trend.workshop.activities").addChild(tempStateMachine);

}


/**
 * Defines UMLContainer 'Trend Use Cases' including its children and contained links
 */
private void loadTrendUseCasesUmlUseCaseGraph() {

	UMLSystemBoundary tempTrendUseCases;
	tempTrendUseCases = getFactory().createUMLSystemBoundary();
	tempTrendUseCases.setId("USCS-3r02gjdyzd85rcyjk1z4wucgo");
	tempTrendUseCases.setName("Trend Use Cases");

	UMLActor tempCustomer;
	tempCustomer = getFactory().createUMLActor();
	tempCustomer.setId("ACTR-3r02gjdyzd85rcyjk1z4wuc7p");
	tempCustomer.setName("Customer");
	tempTrendUseCases.addChild(tempCustomer);

	UMLUseCase tempCustomer2;
	tempCustomer2 = getFactory().createUMLUseCase();
	tempCustomer2.setStereotype(UMLUseCase.STEREOTYPE_DATA_ENTRY);
	tempCustomer2.setId("USCS-3r02gjdyzd85rcyjk1z4wuatu");
	tempCustomer2.setName("Customer");
	tempCustomer2.setProperty(PROP_UC_DATA_ENTRY_TYPE, "Specific");
	tempCustomer2.setProperty(PROP_UC_TARGET_CLASS, "de.gebit.trend.workshop.bo.Customer");
	tempTrendUseCases.addChild(tempCustomer2);

	UMLUseCase tempGoShopping;
	tempGoShopping = getFactory().createUMLUseCase();
	tempGoShopping.setStereotype(UMLUseCase.STEREOTYPE_WORKFLOW);
	tempGoShopping.setId("USCS-3r02gjih0q2f48olq39lzdaic");
	tempGoShopping.setName("Go Shopping");
	tempGoShopping.setProperty(PROP_UC_TARGET_CLASS, "de.gebit.trend.workshop.activities.Go Shopping");
	tempTrendUseCases.addChild(tempGoShopping);

	UMLUseCase tempMaintainProducts;
	tempMaintainProducts = getFactory().createUMLUseCase();
	tempMaintainProducts.setStereotype(UMLUseCase.STEREOTYPE_DATA_ENTRY);
	tempMaintainProducts.setId("USCS-3r02gjdyzd85rcyjk1z4wuc01");
	tempMaintainProducts.setName("Maintain Products");
	tempMaintainProducts.setProperty(PROP_UC_DATA_ENTRY_TYPE, "Specific");
	tempMaintainProducts.setProperty(PROP_UC_TARGET_CLASS, "de.gebit.trend.workshop.bo.Product");
	tempTrendUseCases.addChild(tempMaintainProducts);

	UMLActor tempVendor;
	tempVendor = getFactory().createUMLActor();
	tempVendor.setId("ACTR-3r02gjdyzd85rcyjk1z4wuc00");
	tempVendor.setName("Vendor");
	tempTrendUseCases.addChild(tempVendor);

// Links

	UMLLink tempBaseLink;
	tempBaseLink = createLink(false);
	tempBaseLink.setStereotype(UMLLink.STEREOTYPE_COMMUNICATES_LINK);
	tempBaseLink.setId("LNK-3r02gjdyzd85rcyjk1z4wuaq8");
	ModelUtil.theModelUtil().associateUsing(tempVendor,
			tempCustomer2, tempBaseLink);

	UMLLink tempBaseLink2;
	tempBaseLink2 = createLink(false);
	tempBaseLink2.setStereotype(UMLLink.STEREOTYPE_COMMUNICATES_LINK);
	tempBaseLink2.setId("LNK-3r02gjdyzd85rcyjk1z4wubwh");
	ModelUtil.theModelUtil().associateUsing(tempVendor,
			tempMaintainProducts, tempBaseLink2);

	UMLLink tempBaseLink3;
	tempBaseLink3 = createLink(false);
	tempBaseLink3.setStereotype(UMLLink.STEREOTYPE_COMMUNICATES_LINK);
	tempBaseLink3.setId("LNK-3r02gjdyzd85rcyjk1z4wuc1h");
	ModelUtil.theModelUtil().associateUsing(tempCustomer,
			tempGoShopping, tempBaseLink3);

	// Add to package
	lookupUMLPackage("de.gebit.trend.workshop").addChild(tempTrendUseCases);
}


/**
 * This method defines and loads the TREND BO classes defining the
 * structure of the BusinessObjects used by a TREND application.
 */
@Override
protected void loadTrendBOClassesInto(UMLModel aModel) throws TrendFailureException {
	UMLClass tempClass;
	PersistentKeyDescription tempKeyDescription;

	// --------------------------------------
	// BusinessObject Class de.gebit.trend.workshop.bo.Basket
	// --------------------------------------
	tempKeyDescription = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Basket");
	tempKeyDescription.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	defineTrendBOClass("de.gebit.trend.workshop.bo.Basket", tempKeyDescription);

	// --------------------------------------
	// BusinessObject Class de.gebit.trend.workshop.bo.BasketPosition
	// --------------------------------------
	tempKeyDescription = createPersistentKeyDescription("de.gebit.trend.workshop.bo.BasketPosition");
	tempKeyDescription.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	defineTrendBOClass("de.gebit.trend.workshop.bo.BasketPosition", tempKeyDescription);

	// --------------------------------------
	// BusinessObject Class de.gebit.trend.workshop.bo.Customer
	// --------------------------------------
	tempKeyDescription = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Customer");
	tempKeyDescription.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	tempClass = defineTrendBOClass("de.gebit.trend.workshop.bo.Customer", tempKeyDescription);
	tempClass.setProperty(PROP_CLASS_PREFERRED_TABLE_NAME, "T_CUSTOMER");

	// --------------------------------------
	// BusinessObject Class de.gebit.trend.workshop.bo.Product
	// --------------------------------------
	tempKeyDescription = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Product");
	tempKeyDescription.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	defineTrendBOClass("de.gebit.trend.workshop.bo.Product", tempKeyDescription);

	// --------------------------------------
	// BusinessObject Class de.gebit.trend.workshop.bo.ShoppingBO
	// --------------------------------------
	tempKeyDescription = createPersistentKeyDescription("de.gebit.trend.workshop.bo.ShoppingBO");
	tempKeyDescription.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	defineTrendBOClass("de.gebit.trend.workshop.bo.ShoppingBO", tempKeyDescription);



}

/**
 * This method registers extensible enums used by a TREND application.
 */
@Override
protected void defineExtensibleEnums() {
}


/**
 * Defines the model of all ValueObject classes in the model represented by the receiver.
 */
@Override
protected void loadValueObjectClassesInto(UMLModel aModel) throws TrendFailureException {
	UMLClass tempClass;

	tempClass = aModel.createClass("de.gebit.trend.workshop.activities.LoginVM");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);
	tempClass = aModel.createClass("de.gebit.trend.workshop.activities.OrderVM");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);
	tempClass = aModel.createClass("de.gebit.trend.workshop.activities.PaymentVM");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);
	tempClass = aModel.createClass("de.gebit.trend.workshop.activities.ProductVM");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);
	tempClass.setProperty(PROP_CLASS_MAPPED_ENTITY, "de.gebit.trend.workshop.bo.Product");
	tempClass = aModel.createClass("de.gebit.trend.workshop.activities.ShippingInfoVM");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);
	tempClass = aModel.createClass("de.gebit.trend.workshop.bo.ShoppingConfigurationObject");
	tempClass.setStereotype(UMLClass.STEREOTYPE_VALUE_OBJECT);

}



/**
 * Overridden to define all attributes and services (operations) for all classes.
 * These are defined in the second pass of the model initialization.
 */
@Override
protected void loadUMLAttributesAndOperationsInto(UMLModel aModel) {
	loadUMLAttributesAndOperationsInto1(aModel);

}

private void loadUMLAttributesAndOperationsInto1(UMLModel aModel) {
	UMLClass tempClass;
	UMLClass tempExC;
	UMLOperation tempOp;
	UMLOperationParameter tempP;
	TrendBOAttribute tempAttribute;
	PropertyConstraints tempConstraints;
	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.Basket
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.Basket");
	tempAttribute = createBOAttribute(tempClass, "created", "java.sql.Date");
	tempAttribute = createBOAttribute(tempClass, "basketPositions", "de.gebit.trend.bo.BOCollection");
	tempAttribute = createBOAttribute(tempClass, "customer", "de.gebit.trend.workshop.bo.Customer");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.BasketPosition
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.BasketPosition");
	tempAttribute = createBOAttribute(tempClass, "product", "de.gebit.trend.workshop.bo.Product");
	tempAttribute = createBOAttribute(tempClass, "quantity", "int");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(true);
	((BasicPropertyConstraints)tempConstraints).setMinimumValue(Long.valueOf(1L));
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.Customer
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.Customer");
	tempAttribute = createBOAttribute(tempClass, "firstname", "java.lang.String");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempAttribute.setProperty(PROP_PREFERRED_SQL_NAME, "c_firstname");
	applyDomainTypeNamedOn(aModel, "de.gebit.trend.workshop.bo.NameDomainType", tempAttribute);
	tempAttribute = createBOAttribute(tempClass, "lastname", "java.lang.String");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	applyDomainTypeNamedOn(aModel, "de.gebit.trend.workshop.bo.NameDomainType", tempAttribute);
	tempAttribute = createBOAttribute(tempClass, "street", "java.lang.String");
	tempConstraints = new BasicMinMaxSizeConstraints(0, 64);
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempAttribute.setProperty(PROP_CREATE_INDEX, Boolean.TRUE);
	tempAttribute = createBOAttribute(tempClass, "city", "java.lang.String");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	applyDomainTypeNamedOn(aModel, "de.gebit.trend.workshop.bo.NameDomainType", tempAttribute);
	tempAttribute = createBOAttribute(tempClass, "zipCode", "java.lang.String");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	((BasicPropertyConstraints)tempConstraints).setTrendMaskPattern("[0-9]{5}");
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempAttribute = createBOAttribute(tempClass, "basket", "de.gebit.trend.bo.BOCollection");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.Product
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.Product");
	tempAttribute = createBOAttribute(tempClass, "name", "java.lang.String");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	applyDomainTypeNamedOn(aModel, "de.gebit.trend.workshop.bo.NameDomainType", tempAttribute);
	tempAttribute = createBOAttribute(tempClass, "description", "java.lang.String");
	tempConstraints = new BasicMinMaxSizeConstraints(0, 2000);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempAttribute.setProperty(PROP_PREFERRED_SQL_TYPE, new Integer(java.sql.Types.VARCHAR));
	tempAttribute = createBOAttribute(tempClass, "price", "java.math.BigDecimal");
	tempConstraints = new BasicNumericConstraints(10, 2,false);
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);
	tempAttribute = createBOAttribute(tempClass, "productCategory", "de.gebit.trend.workshop.bo.ProductCategoryEnum");
	tempConstraints = new BasicPropertyConstraints();
	tempConstraints.setNullable(false);
	tempAttribute.setProperty(PROP_CONSTRAINTS, tempConstraints);

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.ShoppingBO
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.ShoppingBO");
	tempClass.setStereotype(UMLClass.STEREOTYPE_ABSTRACT_BUSINESS_OBJECT);
	tempAttribute = createBOAttribute(tempClass, "id", "java.lang.Long");
	tempAttribute.setProperty(PROP_UI_READONLY, Boolean.TRUE);
	tempAttribute.setProperty(PROP_PERSISTENTKEY, Boolean.TRUE);
	tempAttribute.setProperty(PROP_AUTOGENERATEDKEY, Boolean.TRUE);
	tempAttribute = createBOAttribute(tempClass, "lastUser", "java.lang.String");
	tempAttribute.setProperty(PROP_UI_READONLY, Boolean.TRUE);
	applyDomainTypeNamedOn(aModel, "de.gebit.trend.workshop.bo.NameDomainType", tempAttribute);

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.activities.LoginVM
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.activities.LoginVM");
	tempAttribute = createBOAttribute(tempClass, "username", "java.lang.String");
	tempAttribute = createBOAttribute(tempClass, "password", "java.lang.String");
	tempAttribute.setProperty(PROP_UI_COMPONENT_TYPE, "password");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.activities.OrderVM
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.activities.OrderVM");
	tempAttribute = createBOAttribute(tempClass, "products", "java.util.List");
	tempAttribute = createBOAttribute(tempClass, "payment", "de.gebit.trend.workshop.activities.PaymentVM");
	tempAttribute = createBOAttribute(tempClass, "shippingInfo", "de.gebit.trend.workshop.activities.ShippingInfoVM");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.activities.PaymentVM
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.activities.PaymentVM");
	tempAttribute = createBOAttribute(tempClass, "paymentType", "java.lang.String");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.activities.ProductVM
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.activities.ProductVM");
	tempAttribute = createBOAttribute(tempClass, "name", "java.lang.String");
	tempAttribute = createBOAttribute(tempClass, "description", "java.lang.String");
	tempAttribute = createBOAttribute(tempClass, "price", "java.math.BigDecimal");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.activities.ShippingInfoVM
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.activities.ShippingInfoVM");
	tempAttribute = createBOAttribute(tempClass, "street", "java.lang.String");
	tempAttribute = createBOAttribute(tempClass, "city", "java.lang.String");
	tempAttribute = createBOAttribute(tempClass, "country", "java.lang.String");

	// --------------------------------------
	// Attributes for Class de.gebit.trend.workshop.bo.ShoppingConfigurationObject
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.bo.ShoppingConfigurationObject");
	tempAttribute = createBOAttribute(tempClass, "defaultProductCategory", "de.gebit.trend.workshop.bo.ProductCategoryEnum");

	// --------------------------------------
	// Methods for Service Bean ShoppingServiceBean
	// --------------------------------------
	tempClass = lookupUMLClass("de.gebit.trend.workshop.service.ShoppingServiceBean");
	tempOp = createOperation();
	tempOp.setStereotype(UMLOperation.STEREOTYPE_BUSINESS_TRANSACTION);
	tempOp.setName("createCustomer");
	tempClass.addOperation(tempOp);
	tempP = createOperationParameter();
	tempOp.addParameter(tempP);
	tempP.setType(lookupUMLType("java.lang.String"));
	tempP.setName("aFirstname");
	tempP = createOperationParameter();
	tempOp.addParameter(tempP);
	tempP.setType(lookupUMLType("java.lang.String"));
	tempP.setName("anAddress");
	tempP = createOperationParameter();
	tempOp.setReturnParameter(tempP);
	tempP.setType(lookupUMLType("void"));
	tempOp = createOperation();
	tempOp.setStereotype(UMLOperation.STEREOTYPE_BUSINESS_REQUEST);
	tempOp.setName("getProducts");
	tempClass.addOperation(tempOp);
	tempP = createOperationParameter();
	tempOp.setReturnParameter(tempP);
	tempP.setType(lookupUMLType("java.util.List<de.gebit.trend.workshop.activities.ProductVM>"));
	tempExC = lookupUMLClass("java.lang.IllegalStateException");
	tempOp.addThrownException(tempExC);
	tempExC = lookupUMLClass("de.gebit.trend.exception.TrendFailureException");
	tempOp.addThrownException(tempExC);
}


/**
 * Returns a list of all associations defined in the part of the model
 * described by the receiver.
 * @return a collection of UMLAssociation objects
 */
@Override
protected Iterator getAssociations() throws TrendFailureException {
	Collection tempResult = new ArrayList();

	loadAssociations1(tempResult);

	return tempResult.iterator();
}

private void loadAssociations1(Collection aResult) throws TrendFailureException {
	UMLAssociation tempAssociation;
	TrendRelationalMappingDescriptor tempMappingDescriptor;
	PersistentKeyDescription tempSourceKey;
	PersistentKeyDescription tempDestKey;
	// --------------------------------------
	// Relation BasketPosition_product_Product
	// --------------------------------------
	tempAssociation = createAssociation("BasketPosition_product_Product",
			"de.gebit.trend.workshop.bo.BasketPosition", "product", new BasicCardinality(0, Cardinality.INFINITY),
			"de.gebit.trend.workshop.bo.Product", null, new BasicCardinality(1, 1));
	// Relational mapping information
	tempSourceKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.BasketPosition");
	tempSourceKey.add(createPersistentFieldDescription("_product_id", "java.lang.Long", false, false));
	tempDestKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Product");
	tempDestKey.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	tempMappingDescriptor = createMappingDescriptor(tempSourceKey, tempDestKey, false);
	tempAssociation.setMappingDescriptor(tempMappingDescriptor);
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation Basket_basketPositions_BasketPosition
	// --------------------------------------
	tempAssociation = createAssociation("Basket_basketPositions_BasketPosition",
			"de.gebit.trend.workshop.bo.Basket", "basketPositions", new BasicCardinality(1, 1),
			"de.gebit.trend.workshop.bo.BasketPosition", null, new BasicCardinality(0, Cardinality.INFINITY));
	tempAssociation.setProperty(PROP_ASSOC_FK_NAME, "basket_basket_position");
	// Relational mapping information
	tempSourceKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Basket");
	tempSourceKey.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	tempDestKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.BasketPosition");
	tempDestKey.add(createPersistentFieldDescription("_basket_id", "java.lang.Long", false, false));
	tempMappingDescriptor = createMappingDescriptor(tempSourceKey, tempDestKey, true);
	tempAssociation.setMappingDescriptor(tempMappingDescriptor);
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation Basket_customer_Customer
	// --------------------------------------
	tempAssociation = createAssociation("Basket_customer_Customer",
			"de.gebit.trend.workshop.bo.Basket", "customer", new BasicCardinality(0, Cardinality.INFINITY),
			"de.gebit.trend.workshop.bo.Customer", "basket", new BasicCardinality(1, 1));
	tempAssociation.setProperty(PROP_ASSOC_FK_NAME, "customer_basket");
	// Relational mapping information
	tempSourceKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Basket");
	tempSourceKey.add(createPersistentFieldDescription("_customer_id", "java.lang.Long", false, false));
	tempDestKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Customer");
	tempDestKey.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	tempMappingDescriptor = createMappingDescriptor(tempSourceKey, tempDestKey, false);
	tempAssociation.setMappingDescriptor(tempMappingDescriptor);
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation Customer_basket_Basket
	// --------------------------------------
	tempAssociation = createAssociation("Customer_basket_Basket",
			"de.gebit.trend.workshop.bo.Customer", "basket", new BasicCardinality(1, 1),
			"de.gebit.trend.workshop.bo.Basket", "customer", new BasicCardinality(0, Cardinality.INFINITY));
	tempAssociation.setProperty(PROP_ASSOC_FK_NAME, "customer_basket");
	// Relational mapping information
	tempSourceKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Customer");
	tempSourceKey.add(createPersistentFieldDescription("id", "java.lang.Long", true, true));
	tempDestKey = createPersistentKeyDescription("de.gebit.trend.workshop.bo.Basket");
	tempDestKey.add(createPersistentFieldDescription("_customer_id", "java.lang.Long", false, false));
	tempMappingDescriptor = createMappingDescriptor(tempSourceKey, tempDestKey, true);
	tempAssociation.setMappingDescriptor(tempMappingDescriptor);
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation OrderVM_payment_PaymentVM
	// --------------------------------------
	tempAssociation = createAssociation("OrderVM_payment_PaymentVM",
			"de.gebit.trend.workshop.activities.OrderVM", "payment", new BasicCardinality(0, Cardinality.INFINITY),
			"de.gebit.trend.workshop.activities.PaymentVM", null, new BasicCardinality(1, 1));
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation OrderVM_products_ProductVM
	// --------------------------------------
	tempAssociation = createAssociation("OrderVM_products_ProductVM",
			"de.gebit.trend.workshop.activities.OrderVM", "products", new BasicCardinality(0, Cardinality.INFINITY),
			"de.gebit.trend.workshop.activities.ProductVM", null, new BasicCardinality(0, Cardinality.INFINITY));
	aResult.add(tempAssociation);

	// --------------------------------------
	// Relation OrderVM_shippingInfo_ShippingInfoVM
	// --------------------------------------
	tempAssociation = createAssociation("OrderVM_shippingInfo_ShippingInfoVM",
			"de.gebit.trend.workshop.activities.OrderVM", "shippingInfo", new BasicCardinality(0, Cardinality.INFINITY),
			"de.gebit.trend.workshop.activities.ShippingInfoVM", null, new BasicCardinality(1, 1));
	aResult.add(tempAssociation);

}


/**
 * Defines the UMLClasses, which describe the behavior of
 * of the "ServiceBeans" defined in the model.
 */
@Override
protected void loadUMLServiceBeansInto(UMLModel aModel) {
	UMLClass tempClass;

	// --------------------------------------
	// Service Bean ShoppingServiceBean
	// --------------------------------------
	tempClass = aModel.createClass("de.gebit.trend.workshop.service.ShoppingServiceBean");
	tempClass.setStereotype(UMLClass.STEREOTYPE_SERVICE_BEAN);
	tempClass.setCompleteDeclarationTypeName("de.gebit.trend.workshop.service.ShoppingServiceBean");

}

/**
 * Defines all BOEditor / QueryEditor / ... classes in the model represented by the receiver.
 */
@Override
protected void loadUIClassesInto(UMLModel aModel) throws TrendFailureException {
}


}
